import { IModel } from "./model";
import { IKerasModelConfig, IKerasModelSummary, IKerasModelTrainingHistory } from "./keras-models";



/* Regression Types at classification/types.py */





/* Classification */



/**
* Classification Configuration
* The configuration that was used to train and will predict based on.
*/
export interface IClassificationConfig {
    // The identifier of the model
    id: string,

    // Important information regarding the trained model
    description: string,

    // The identifier of the training data used
    training_data_id: string,

    // The list of ArimaModel|RegressionModel attached to the classification
    models: IModel[]

    // The summary of the KerasModel
    summary: IKerasModelSummary
}










/* Classification Training Data */




/**
 * Active Training Data Position
 * When a position is opened, the active position dict is populated with the up and down price values
 * as well as the predictions generated by the Models. Once the position closes, the row dict
 * is completed with the up and down values
 */
export interface ITrainingDataActivePosition {
    // The price in which the position will be closed as up
    up_price: number,

    // The price in which the position will be closed as down
    down_price: number,

    // Model's features which will be completed with labels once the position closes
    row: {[modelID: string]: number}
}




/**
 * Training Data Insights
 * Data used to represent the proportions for the price changes and the position types generated by the 
 * models.
 */
export interface ITrainingDataPriceActionsInsight {
    up: number,
    down: number
}
export interface ITrainingDataPredictionInsight {
    long: number,
    short: number,
    neutral: number
}
export interface ITrainingDataPredictionInsights {
    [modelID: string]: ITrainingDataPredictionInsight
}




/**
 * Training Data Config
 * The Training configuration that resides in the configuration file and it is used to initialize
 * the training data generator.
 */
export interface ITrainingDataConfig {
    // The description of the Training Data that will be generated.
    description: string,

    // Start and end time - If none provided, will use all the available data
    start: string|number|null,
    end: string|number|null,

    // Percentages that will determine if the price moved up or down after a position is opened
    up_percent_change: number,
    down_percent_change: number,

    // The list of ArimaModels|RegressionModels that will be used to predict
    models: IModel[]
}




/**
 * Compressed Training Data
 * In order to optimize the size of the training data file, the data is converted into a dict
 * with the rows and columns lists.
 */
export interface ICompressedTrainingData {
    columns: string[],
    rows: Array<number[]>
}




/**
 * Training Data File
 * The dict that contains all the information needed to train a ClassificationModel.
 */
export interface ITrainingDataFile {
    // Universally Unique Identifier (uuid4)
    id: string,

    // The description of the Training Data that will be generated.
    description: string,

    // The timestamp in which the Training Data was generated
    creation: number,

    // Start and end time
    start: number,  // First candlestick's ot
    end: number,    // Last candlestick's ct

    // The number of minutes that took to generate the training data
    duration_minutes: number,

    // Percentages that will determine if the price moved up or down after a position is opened
    up_percent_change: number,
    down_percent_change: number,

    // List of ArimaModels|RegressionModels
    models: IModel[],

    // Price Actions Insight - The up and down counts
    price_actions_insight: ITrainingDataPriceActionsInsight,

    // Prediction Insight 
    // Position type count for each single model in this format:
    // {[modelID: str]: ITrainingDataPredictionInsight}
    predictions_insight: ITrainingDataPredictionInsights,

    // Training Data
    // The training data generated in a compressed format.
    training_data: ICompressedTrainingData
}









/* Classification Training */





/**
 * Classification Training Configuration
 * The configuration that will be used to initialize, train and save the models.
 */
export interface IClassificationTrainingConfig {
    // The ID of the model. Must be descriptive, compatible with filesystems and preffixed with 'C_'
    id: string,

    // Any relevant data that should be attached to the trained model.
    description: string,

    // The learning rate to be used by the optimizer
    learning_rate: number,

    // The optimizer to be used.
    optimizer: string, // 'adam'|'rmsprop'

    // The loss function to be used
    loss: string, // 'categorical_crossentropy'|'?'

    // The metric to be used for meassuring the val_loss
    metric: string, // 'categorical_accuracy'|'?'

    // Train Data Shuffling
    shuffle_data: boolean,

    // Keras Model Configuration
    keras_model: IKerasModelConfig
}







/**
 * Classification Training Batch
 * Keras Models and created and evaluated in batches. Moreover, multiple batches can be combined
 * in the GUI
 */
export interface IClassificationTrainingBatch {
    // Descriptive name to easily identify the batch. Must be compatible with filesystems.
    name: string,

    // ID of the Classification Training Data that will be used to train all the models.
    training_data_id: string,

    // The configurations for the models that will be trained within the batch.
    models: IClassificationTrainingConfig[]
}







/**
 * Training Data Summary
 * In order to simplify interactions with the IClassificationTrainingCertificate, the training
 * data is summarized in a dictionary.
 */
export interface ITrainingDataSummary {
    // Identifier
    id: string,
    description: string,

    // Date Range
    start: number,    // Open Time of the first prediction candlestick
    end: number,      // Close Time of the last prediction candlestick

    // Dataset Sizes
    train_size: number,     // Number of rows in the train dataset
    test_size: number,      // Number of rows in the test dataset

    // Percentages that determine if the price moved up or down
    up_percent_change: number,
    down_percent_change: number
}






/**
 * Classification Training Certificate
 * Once the training, saving and evaluation completes, a certificate containing all the
 * data is saved and issued for batching.
 */
export interface IClassificationTrainingCertificate {
    /* Identification */
    id: string,
    description: string,


    /* Training Data */
    training_data_summary: ITrainingDataSummary,



    /* Training Configuration */
    learning_rate: number,
    optimizer: string,
    loss: string,
    metric: string,
    shuffle_data: boolean,
    keras_model_config: IKerasModelConfig,




    /* Training */

    // Date Range
    training_start: number,     // Time in which the training started
    training_end: number,       // Time in which the training ended

    // Training performance by epoch
    training_history: IKerasModelTrainingHistory,

    // Result of the evaluation of the test dataset
    test_evaluation: [number, number], // [loss, metric]

    // The configuration of the Classification
    classification_config: IClassificationConfig
}