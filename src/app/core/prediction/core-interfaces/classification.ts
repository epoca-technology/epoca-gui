import { IModel } from "./model";
import { IKerasModelConfig, IKerasModelTrainingHistory } from "./keras-models";
import { IClassificationConfig } from "./model";



/* Regression Types at classification/types.py */









/* Classification Training Data */




/**
 * Active Training Data Position
 * When a position is opened, the active position dict is populated with the up and down price values
 * as well as the predictions generated by the Models. Once the position closes, the row dict
 * is completed with the up and down values
 */
export interface ITrainingDataActivePosition {
    // The price in which the position will be closed as up
    up_price: number,

    // The price in which the position will be closed as down
    down_price: number,

    // Model's features which will be completed with labels once the position closes
    row: {[modelID: string]: number}
}




/**
 * Training Data Insights
 * Data used to represent the proportions for the price changes and the position types generated by the 
 * models.
 */
export interface ITrainingDataPriceActionsInsight {
    up: number,
    down: number
}
export interface ITrainingDataPredictionInsight {
    long: number,
    short: number,
    neutral: number
}
export interface ITrainingDataPredictionInsights {
    [modelID: string]: ITrainingDataPredictionInsight
}
export interface ITechnicalAnalysisInsight {
    [taName: string]: {
        "count": number,
        "mean": number,
        "std": number,
        "min": number,
        "25%": number,
        "50%": number,
        "75%": number,
        "max": number
    }
}




/**
 * Training Data Config
 * The Training configuration that resides in the configuration file and it is used to initialize
 * the training data generator.
 */
export interface ITrainingDataConfig {
    // The description of the Training Data that will be generated.
    description: string,

    // Start and end time - If none provided, will use all the available data
    start: string|number|null,
    end: string|number|null,

    /**
     * The Prediction Candlestick steps that will be used to generate the data. If 0 is provided
     * the training data will be generated the traditional way.
     * The purpose of this mode is to increase the size of the Training Dataset and cover more 
     * cases.
     */
    steps: number,

    // Percentages that will determine if the price moved up or down after a position is opened
    up_percent_change: number,
    down_percent_change: number,

    // The list of ArimaModels|RegressionModels that will be used to predict
    models: IModel[],

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_stoch: boolean,     // Momentum
    include_aroon: boolean,     // Trend
    include_stc: boolean,       // Trend
    include_mfi: boolean,       // Volume
}




/**
 * Compressed Training Data
 * In order to optimize the size of the training data file, the data is converted into a dict
 * with the rows and columns lists.
 */
export interface ICompressedTrainingData {
    columns: string[],
    rows: Array<number[]>
}




/**
 * Training Data File
 * The dict that contains all the information needed to train a ClassificationModel.
 */
export interface ITrainingDataFile {
    // Universally Unique Identifier (uuid4)
    id: string,

    // The ID of the Regression Selection that was used to pick the Regression Models
    regression_selection_id: string,

    // The description of the Training Data that will be generated.
    description: string,

    // The timestamp in which the Training Data was generated
    creation: number,

    // Start and end time
    start: number,  // First candlestick's ot
    end: number,    // Last candlestick's ct

    // The number of minutes that took to generate the training data
    duration_minutes: number,

    /**
     * The Prediction Candlestick steps that will be used to generate the data. If 0 is provided
     * the training data will be generated the traditional way.
     * The purpose of this mode is to increase the size of the Training Dataset and cover more 
     * cases.
     */
    steps: number,

    // Percentages that will determine if the price moved up or down after a position is opened
    up_percent_change: number,
    down_percent_change: number,

    // List of ArimaModels|RegressionModels
    models: IModel[],

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_stoch: boolean,     // Momentum
    include_aroon: boolean,     // Trend
    include_stc: boolean,       // Trend
    include_mfi: boolean,       // Volume

    // The total number of features that will be used by the model to predict
    features_num: number,

    // Price Actions Insight - The up and down counts
    price_actions_insight: ITrainingDataPriceActionsInsight,

    /**
     * Prediction Insight 
     * Position type count for each single model in this format:
     * {[modelID: str]: ITrainingDataPredictionInsight}
     */
    predictions_insight: ITrainingDataPredictionInsights,

    /**
     * Technical Analysis Summary
     * If none of the technical analysis features are enabled, this value will be None.
     * {[taName: str]: df.describe().to_dict()}|null
     */
    technical_analysis_insight: ITechnicalAnalysisInsight|null,

    /**
     * Training Data
     * The training data generated in a compressed format.
     */
    training_data: ICompressedTrainingData
}









/* Classification Training */





/**
 * Classification Training Configuration
 * The configuration that will be used to initialize, train and save the models.
 */
export interface IClassificationTrainingConfig {
    // The ID of the model. Must be descriptive, compatible with filesystems and preffixed with 'C_'
    id: string,

    // Any relevant data that should be attached to the trained model.
    description: string,

    // The optimizer to be used.
    optimizer: "adam"|"rmsprop",

    // The loss function to be used
    loss: "categorical_crossentropy"|"binary_crossentropy",

    // The metric to be used for meassuring the val_loss
    metric: "categorical_accuracy"|"binary_accuracy",

    // Keras Model Configuration
    keras_model: IKerasModelConfig
}







/**
 * Classification Training Batch
 * Keras Models and created and evaluated in batches. Moreover, multiple batches can be combined
 * in the GUI
 */
export interface IClassificationTrainingBatch {
    // Descriptive name to easily identify the batch. Must be compatible with filesystems.
    name: string,

    // ID of the Classification Training Data that will be used to train all the models.
    training_data_id: string,

    // The configurations for the models that will be trained within the batch.
    models: IClassificationTrainingConfig[]
}







/**
 * Training Data Summary
 * In order to simplify interactions with the IClassificationTrainingCertificate, the training
 * data is summarized in a dictionary.
 */
export interface ITrainingDataSummary {
    // The ID of the Regression Selection that was used to pick the Regression Models
    regression_selection_id: string,

    // Identifier
    id: string,
    description: string,

    // Date Range
    start: number,    // Open Time of the first prediction candlestick
    end: number,      // Close Time of the last prediction candlestick

    // Dataset Sizes
    train_size: number,     // Number of rows in the train dataset
    test_size: number,      // Number of rows in the test dataset

    /**
     * The Prediction Candlestick steps that will be used to generate the data. If 0 is provided
     * the training data will be generated the traditional way.
     * The purpose of this mode is to increase the size of the Training Dataset and cover more 
     * cases.
     */
    steps: number,

    // Percentages that determine if the price moved up or down
    up_percent_change: number,
    down_percent_change: number,

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_stoch: boolean,     // Momentum
    include_aroon: boolean,     // Trend
    include_stc: boolean,       // Trend
    include_mfi: boolean,       // Volume

    // The total number of features that will be used by the model to predict
    features_num: number
}








/**
 * Classification Evaluation
 * Evaluation performed right after the model is trained in order to get an overview of the
 * potential accuracy, as well as the prediction type distribution.
 * Each evaluation is performed using a random candlestick open time and is evaluated against
 * the sequence of 1 minute candlesticks that follow. The iteration will continue until the
 * evaluation position is closed.
 */
export interface IClassificationEvaluation {
    // The number of evaluations performed on the Regression
    evaluations: number,
    max_evaluations: number,

    // The number of times the Regression predicted a price increase
    increase_num: number,
    increase_successful_num: number,

    // The number of times the Regression predicted a price decrease
    decrease_num: number,
    decrease_successful_num: number,

    // Accuracy
    increase_acc: number,
    decrease_acc: number,
    acc: number,

    // Increase Predictions Overview
    increase_list: number[],
    increase_max: number,
    increase_min: number,
    increase_mean: number,
    increase_successful_list: number[],
    increase_successful_max: number,
    increase_successful_min: number,
    increase_successful_mean: number,

    // Decrease Predictions Overview
    decrease_list: number[],
    decrease_max: number,
    decrease_min: number,
    decrease_mean: number,
    decrease_successful_list: number[],
    decrease_successful_max: number,
    decrease_successful_min: number,
    decrease_successful_mean: number,

    // Outcomes
    increase_outcomes: number,
    decrease_outcomes: number
}






/**
 * Classification Training Certificate
 * Once the training, saving and evaluation completes, a certificate containing all the
 * data is saved and issued for batching.
 */
export interface IClassificationTrainingCertificate {
    /* Identification */
    id: string,
    description: string,


    /* Training Data */
    training_data_summary: ITrainingDataSummary,



    /* Training Configuration */
    learning_rate: number,
    optimizer: string,
    loss: string,
    metric: string,
    shuffle_data: boolean,
    keras_model_config: IKerasModelConfig,




    /* Training */

    // Date Range
    training_start: number,     // Time in which the training started
    training_end: number,       // Time in which the training ended

    // Training performance by epoch
    training_history: IKerasModelTrainingHistory,

    // Result of the evaluation of the test dataset
    test_evaluation: [number, number], // [loss, metric]

    // Classification Post-Training Evaluation
    classification_evaluation: IClassificationEvaluation,

    // The configuration of the Classification
    classification_config: IClassificationConfig,


    /* General Evaluation */
    general: IGeneralEvaluation // Only exists in the GUI
}











/* General Evaluation */







/**
 * General Evaluation (GUI)
 * This evaluation is performed on each certificate when they are extracted 
 * from the JSON files.
 */
export interface IGeneralEvaluation {
    // Total points collected by all the items and categories
    points: number,

    // The maximum number of points that can be collected within the evaluation
    max_points: number,
    
    // List of categories
    categories: IGeneralEvaluationCategory[]
}



export interface IGeneralEvaluationCategory {
    // The name of the category
    name: string,

    // The description of the category
    description: string,

    // Total points collected within the category
    points: number,

    // The maximum number of points that can be collected within the category
    max_points: number,

    // Category Items
    items: IGeneralEvaluationItem[]
}


export interface IGeneralEvaluationItem {
    // The identifier of the item
    id: IGeneralEvaluationItemID,

    // The name of the item
    name: string,

    // A brief description of what the evaluation does
    description: string,

    // A brief description of the item's state
    state: string,

    // Total points collected by the item
    points: number,

    // The maximum number of points that can be collected within the category
    max_points: number
}


export type IGeneralEvaluationItemID = 
// Training
"loss_improvement"|
"val_loss_improvement"|
"loss_vs_val_loss"|
"accuracy_improvement"|
"val_accuracy_improvement"|
"accuracy_vs_val_accuracy"|

// Test Dataset Evaluation
"test_ds_accuracy"|

// Classification Evaluation
"long_accuracy"|
"short_accuracy"|
"general_accuracy"|
"prediction_neutrality"|
"long_prediction_balance"|
"short_prediction_balance";




export interface IItemGeneralEvaluation {
    points: number,
    state: string
}