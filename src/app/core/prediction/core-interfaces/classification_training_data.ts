import { IModel } from "./model";



/* Classification Training Data Types at types/classification_training_data_types.py */








/**
 * Active Training Data Position
 * When a position is opened, the active position dict is populated with the up and down price values
 * as well as the predictions generated by the Models. Once the position closes, the row dict
 * is completed with the up and down values
 */
export interface ITrainingDataActivePosition {
    // The price in which the position will be closed as up
    up_price: number,

    // The price in which the position will be closed as down
    down_price: number,

    // Model's features which will be completed with labels once the position closes
    row: {[modelID: string]: number}
}




/**
 * Training Data Insights
 * Data used to represent the proportions for the price changes and the position types generated by the 
 * models.
 */
export interface ITrainingDataPriceActionsInsight {
    up: number,
    down: number
}
export interface ITrainingDataPredictionInsight {
    long: number,
    short: number,
    neutral: number
}
export interface ITrainingDataPredictionInsights {
    [modelID: string]: ITrainingDataPredictionInsight
}
export interface ITechnicalAnalysisInsight {
    [taName: string]: {
        "count": number,
        "mean": number,
        "std": number,
        "min": number,
        "25%": number,
        "50%": number,
        "75%": number,
        "max": number
    }
}




/**
 * Training Data Config
 * The Training configuration that resides in the configuration file and it is used to initialize
 * the training data generator.
 */
export interface ITrainingDataConfig {
    // The description of the Training Data that will be generated.
    description: string,

    // Start and end time - If none provided, will use all the available data
    start: string|number|null,
    end: string|number|null,

    /**
     * The Prediction Candlestick steps that will be used to generate the data. If 0 is provided
     * the training data will be generated the traditional way.
     * The purpose of this mode is to increase the size of the Training Dataset and cover more 
     * cases.
     */
    steps: number,

    // Percentages that will determine if the price moved up or down after a position is opened
    up_percent_change: number,
    down_percent_change: number,

    // The list of ArimaModels|RegressionModels that will be used to predict
    models: IModel[],

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_stoch: boolean,     // Momentum
    include_aroon: boolean,     // Trend
    include_stc: boolean,       // Trend
    include_mfi: boolean,       // Volume
}




/**
 * Compressed Training Data
 * In order to optimize the size of the training data file, the data is converted into a dict
 * with the rows and columns lists.
 */
export interface ICompressedTrainingData {
    columns: string[],
    rows: Array<number[]>
}




/**
 * Training Data File
 * The dict that contains all the information needed to train a ClassificationModel.
 */
export interface ITrainingDataFile {
    // Universally Unique Identifier (uuid4)
    id: string,

    // The ID of the Regression Selection that was used to pick the Regression Models
    regression_selection_id: string,

    // The description of the Training Data that will be generated.
    description: string,

    // The timestamp in which the Training Data was generated
    creation: number,

    // Start and end time
    start: number,  // First candlestick's ot
    end: number,    // Last candlestick's ct

    // The number of minutes that took to generate the training data
    duration_minutes: number,

    /**
     * The Prediction Candlestick steps that will be used to generate the data. If 0 is provided
     * the training data will be generated the traditional way.
     * The purpose of this mode is to increase the size of the Training Dataset and cover more 
     * cases.
     */
    steps: number,

    // Percentages that will determine if the price moved up or down after a position is opened
    up_percent_change: number,
    down_percent_change: number,

    // List of ArimaModels|RegressionModels
    models: IModel[],

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_stoch: boolean,     // Momentum
    include_aroon: boolean,     // Trend
    include_stc: boolean,       // Trend
    include_mfi: boolean,       // Volume

    // The total number of features that will be used by the model to predict
    features_num: number,

    // Price Actions Insight - The up and down counts
    price_actions_insight: ITrainingDataPriceActionsInsight,

    /**
     * Prediction Insight 
     * Position type count for each single model in this format:
     * {[modelID: str]: ITrainingDataPredictionInsight}
     */
    predictions_insight: ITrainingDataPredictionInsights,

    /**
     * Technical Analysis Summary
     * If none of the technical analysis features are enabled, this value will be None.
     * {[taName: str]: df.describe().to_dict()}|null
     */
    technical_analysis_insight: ITechnicalAnalysisInsight|null,

    /**
     * Training Data
     * The training data generated in a compressed format.
     */
    training_data: ICompressedTrainingData
}




