import { IArimaConfig } from "./arima";
import { IPercentChangeInterpreterConfig, IProbabilityInterpreterConfig, IConsensusInterpreterConfig } from "./interpreter";
import { IKerasModelSummary } from "./keras-models";



/* Model Types at types/model_types.py */







/* Predictions */




/**
 * When the model evaluates and predicts on current market data, outputs a result of 
 * 1 (long) or 0 (neutral) or -1 (short)
 */
 export type IPredictionResult = 1|0|-1;
 export type IPredictionResultName = 'Long'|'Short'|'Neutral';
 
 
 
 
 
 
 /**
  * Prediction Meta Data
  * This is the data that was used by the interpreter to come up with a result.
  * The only parameter that is required is the description (d) which should always
  * follow the pattern 'long-*' or 'short-*'. The other properties will only be 
  * present if cache is disabled.
  */
 export interface IPredictionMetaData {
     // Interpretation Description
     d: string,  
 
     // List of predictions generated by Arima. Only present in ArimaModel Predictions.
     pl?: number[],
 
     /**
      * List of normalized predictions generated by a RegressionModel. Only present in
      * RegressionModel Predictions. 
      */
     npl?: number[],
 
     /**
      * Features: ArimaModel|RegressionModel prediction results and/or technical analysis data. 
      * Only present in ClassificationModel Predictions.
      */
     f?: number[]
 
     // Up Probability. Only present in ClassificationModel Predictions.
     up?: number,
 
     // Down Probability. Only present in ClassificationModel Predictions.
     dp?: number
 }
 
 
 
 
 
 
 /**
  * Prediction
  * The final prediction dict generated by the model. It contains the result, the time
  * in which the prediction was made and the metadata.
  * For ArimaModels, RegressionModels and ClassificationModels, the md list will always contain 
  * one element. On the other side, MultiClassificationModels contain as many metadata elements 
  * as ClassificationModels and they also have identical indexing.
  */
 export interface IPrediction {
     // Prediction result: -1 | 0 | 1
     r: IPredictionResult,
 
     // The time in which the prediction was performed (milliseconds)
     t: number,
 
     /**
      * Prediction metadata: An ArimaModel|RegressionModel|ClassificationModel will always output 
      * a single IPredictionMetaData whereas, MultiClassificationModels will output any number of 
      * IPredictionMetaData dictionaries according to the number of ClassificationModels within it.
      */
     md: IPredictionMetaData[]
 }
 
 
 




 /* Keras Models Configurations */
 

 
/**
* Regresion Configuration
* The configuration that was used to train and will predict based on.
*/
export interface IRegressionConfig {
	// The identifier of the model
	id: string,

	// Important information regarding the trained model
    description: string,

    /**
     * Regression Model Type
     * Default: will generate all predictions in one go.
     * Autoregressive: will generate 1 prediction at a time and feed it to itself as an input 
     */
    autoregressive: boolean,

    // The number of candlesticks it will lookback to make a prediction
    lookback: number,

    // The number of predictions it will generate
    predictions: number

    // The summary of the KerasModel
    summary: IKerasModelSummary
}


 
 

/**
* Classification Configuration
* The configuration that was used to train and will predict based on.
*/
export interface IClassificationConfig {
    // The identifier of the model
    id: string,

    // Important information regarding the trained model
    description: string,

    // The identifier of the training data used
    training_data_id: string,

    // The list of ArimaModel|RegressionModel attached to the classification
    models: IModel[]

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_stoch: boolean,     // Momentum
    include_aroon: boolean,     // Trend
    include_stc: boolean,       // Trend
    include_mfi: boolean,       // Volume

    // The total number of features that will be used by the model to predict
    features_num: number,

    // The summary of the KerasModel
    summary: IKerasModelSummary
}







/* Model Types */


// Types of models supported by the project
export type IModelType = 
"ArimaModel"|               // A
"RegressionModel"|          // R_
"ClassificationModel"|      // C_
"XGBRegressionModel"|       // XGBR_
"XGBClassificationModel"|   // XGBC_
"ConsensusModel";           // CON_



// Trainable Model Types
export type ITrainableModelType = 
"keras_regression"|         // RegressionModel
"keras_classification"|     // ClassificationModel
"xgb_regression"|           // XGBRegressionModel
"xgb_classification";       // XGBClassificationModel




// Model ID Prefix
export type IModelIDPrefix = 
"A"|       // ArimaModel
"R_"|      // RegressionModel
"C_"|      // ClassificationModel
"XGBR_"|   // XGBRegressionModel
"XGBC_"|   // XGBClassificationModel
"CON_";    // ConsensusModel





 
 
 
 
 /* Model Configurations */
 
 
 

 
 /**
  * ArimaModel Configuration
  * The configuration that will be use to generate and interpret predictions.
  */
 export interface IArimaModelConfig {
     // The number of prediction candlesticks that will look into the past in order to make a prediction.
     lookback: number,
 
     // The number of predictions to be generated by Arima
     predictions: number,
 
     // Parameters for ARIMA(p,d,q)(P,D,Q)m
     arima: IArimaConfig,
 
     // The interpreter that will determine the prediction's result
     interpreter: IPercentChangeInterpreterConfig
 }
 
 
 
 
 

 /**
  * RegressionModel Configuration
  * The configuration that will be use to generate and interpret predictions.
  */
 export interface IRegressionModelConfig {
    // The ID of the saved keras regression model
    regression_id: string,
 
    /**
     * The entire configuration used by the regression. This value is only present
     * when the function get_model is used.
     */
    regression: IRegressionConfig,
 
    // The interpreter that will determine the prediction's result
    interpreter: IPercentChangeInterpreterConfig,
 }
 
 
 
 
 
/**
 * ClassificationModel Configuration
 * The configuration that will be use to generate and interpret predictions.
 */
export interface IClassificationModelConfig {
    // The ID of the saved keras classification model
    classification_id: string,

    /**
     * The entire configuration used by the classification. This value is only present
     * when the function get_model is used.
     */
    classification: IClassificationConfig,

    // The interpreter that will determine the prediction's result
    interpreter: IProbabilityInterpreterConfig
}
 


/**
 * ConsensusModel Configuration
 * The configuration that will be use to generate and interpret predictions.
 */
export interface IConsensusModelConfig {
    /**
     * The list of ArimaModel|RegressionModel|ClassificationModel attached to the ConsensusModel.
     * This value is only populated when get_model is invoked
     */
    sub_models: IModel[],

    // The interpreter that will determine the prediction's result
    interpreter: IConsensusInterpreterConfig
}
 
 
 
 
 
 
 
 
 /* Model */
 
 
 
 
 
 
 
 /**
  * Model
  * The final state of an ArimaModel, RegressionModel, ClassificationModel or ConsensusModel once an 
  * instance is initialized.
  * The type of a model can be determined based on its configuration. Existing models are:
  * 1) ArimaModel: a model with a single ArimaModel.
  * 2) RegressionModel: a model with a single RegressionModel.
  * 3) ClassificationModel: a model with a minimum of 5 ArimaModels|RegressionModels embedded in the
  *         Training Data as well as a single ClassificationModel Config.
  * 4) ConsensusModel: a model that can contain any number (>= 2) of models except for itself as well as a 
  *         single ConsensusModelConfig.
  */
 export interface IModel {
    // Identity of the Model. If it is an ArimaModel, it must follow the guidelines.
    id: string,
 
    // ArimaModels' Configurations
    arima_models?: IArimaModelConfig[],

    // RegressionModels' Configurations
    regression_models?: IRegressionModelConfig[],
 
    // ClassificationModels' Configurations
    classification_models?: IClassificationModelConfig[],

    // ConsensusModel's Configuration
    consensus_model?: IConsensusModelConfig
 } 