import { IArimaConfig } from "./arima";
import { IPercentChangeInterpreterConfig, IProbabilityInterpreterConfig } from "./interpreter";
import { IRegressionConfig } from "./regression";



/* Model Types at model/types.py */







/* Predictions */




/**
 * When the model evaluates and predicts on current market data, outputs a result of 
 * 1 (long) or 0 (neutral) or -1 (short)
 */
 export type IPredictionResult = 1|0|-1;
 export type IPredictionResultName = 'Long'|'Short'|'Neutral';
 
 
 
 
 
 
 /**
  * Prediction Meta Data
  * This is the data that was used by the interpreter to come up with a result.
  * The only parameter that is required is the description (d) which should always
  * follow the pattern 'long-*' or 'short-*'. The other properties will only be 
  * present if cache is disabled.
  */
 export interface IPredictionMetaData {
     // Interpretation Description
     d: string,  
 
     // List of predictions generated by Arima. Only present in ArimaModel Predictions.
     pl?: number[],
 
     /**
      * List of normalized predictions generated by a RegressionModel. Only present in
      * RegressionModel Predictions. 
      */
     npl?: number[],
 
     /**
      * ArimaModel|RegressionModel prediction results. Only present in ClassificationModel
      * Predictions.
      */
     pr?: number[]
 
     // Up Probability. Only present in ClassificationModel Predictions.
     up?: number,
 
     // Down Probability. Only present in ClassificationModel Predictions.
     dp?: number
 }
 
 
 
 
 
 
 /**
  * Prediction
  * The final prediction dict generated by the model. It contains the result, the time
  * in which the prediction was made and the metadata.
  * For ArimaModels, RegressionModels and ClassificationModels, the md list will always contain 
  * one element. On the other side, MultiClassificationModels contain as many metadata elements 
  * as ClassificationModels and they also have identical indexing.
  */
 export interface IPrediction {
     // Prediction result: -1 | 0 | 1
     r: IPredictionResult,
 
     // The time in which the prediction was performed (milliseconds)
     t: number,
 
     /**
      * Prediction metadata: An ArimaModel|RegressionModel|ClassificationModel will always output 
      * a single IPredictionMetaData whereas, MultiClassificationModels will output any number of 
      * IPredictionMetaData dictionaries according to the number of ClassificationModels within it.
      */
     md: IPredictionMetaData[]
 }
 
 
 
 
 
 
 
 
 
 
 
 
 /* Model Configurations */
 
 
 

 
 /**
  * ArimaModel Configuration
  * The configuration that will be use to generate and interpret predictions.
  */
 export interface IArimaModelConfig {
     // The number of prediction candlesticks that will look into the past in order to make a prediction.
     lookback: number,
 
     // The number of predictions to be generated by Arima
     predictions: number,
 
     // Parameters for ARIMA(p,d,q)(P,D,Q)m
     arima: IArimaConfig,
 
     // The interpreter that will determine the prediction's result
     interpreter: IPercentChangeInterpreterConfig
 }
 
 
 
 
 

 /**
  * RegressionModel Configuration
  * The configuration that will be use to generate and interpret predictions.
  */
 export interface IRegressionModelConfig {
    // The ID of the saved keras regression model
    regression_id: string,
 
    // The interpreter that will determine the prediction's result
    interpreter: IPercentChangeInterpreterConfig,
 
    /**
     * The entire configuration used by the regression. This value is only present
     * when the function get_model is used.
     */
    regression: IRegressionConfig
 }
 
 
 
 
 
/**
 * ClassificationModel Configuration
 * The configuration that will be use to generate and interpret predictions.
 */
export interface IClassificationModelConfig {
    // The ID of the saved keras classification model
    classification_id: string,

    // The interpreter that will determine the prediction's result
    interpreter: IProbabilityInterpreterConfig,

    /**
     * The entire configuration used by the classification. This value is only present
     * when the function get_model is used.
     */
    classification: any // @TODO
}
 
 
 
 
 
 
 
 
 
 /* Model */
 
 
 
 
 /**
  * Model Type Name
  * The names of the existing models.
  */
  export type IModelTypeName = 'ArimaModel'|'RegressionModel'|'ClassificationModel';
 
 
 
 
 
 
 
 
 /**
  * Model
  * The final state of an ArimaModel, RegressionModel or ClassificationModel once an 
  * instance is initialized.
  * The type of a model can be determined based on its configuration. Existing models are:
  * 1) ArimaModel: A model with a single ArimaModel.
  * 2) RegressionModel: A model with a single RegressionModel.
  * 3) ClassificationModel: A model with a minimum of 5 ArimaModels|RegressionModels as well as
  * a single ClassificationModel Config.
  */
 export interface IModel {
    // Identity of the Model. If it is an ArimaModel, it must follow the guidelines.
    id: string,
 
    // ArimaModels that will be used to predict accordingly based on the type of model.
    arima_models?: IArimaModelConfig[],

    // RegressionModels that will be used to predict accordingly based on the type of model.
    regression_models?: IRegressionModelConfig[],
 
    // ClassificationModels that will be used to predict accordingly based on the type of model.
    classification_models?: IClassificationModelConfig[]
 } 