

// Prediction Service
export interface IPredictionService {
    // Properties
    resultNames: {[result: string]: IPredictionResultName},
    



    // Models
    getModelTypeName(model: IModel): IModelTypeName,
}








/* Interpreter */





/**
 *  
 * Interpreter Configuration
 * The configuration used in order to interpret the model's predictions based on the 
 * percentual change from the first to the last prediction as well as a series of 
 * indicators that can help understand the current market state.
 */
export interface IInterpreterConfig {
    long: number,
    short: number
}












/* Predictions */




/**
 * When the model evaluates and predicts on current market data, outputs a result of 
 * 1 (long) or 0 (neutral) or -1 (short)
 */
export type IPredictionResult = 1|0|-1;
export type IPredictionResultName = 'Long'|'Short'|'Neutral';






/**
 * Prediction Meta Data
 * This is the data that was used by the interpreter to come up with a result.
 * The only parameters that are required are the description (d) which should always
 * follow the pattern 'long-*' or 'short-*' as well as the Predictions list (pl).
 */
export interface IPredictionMetaData {
    // Interpretation Description
    d: string,  

    // List of predictions generated by Arima. Only present in ArimaModel Predictions
    pl?: number[],

    // Arima Model Prediction Results. Only present in DecisionModels
    pr?: number,

    // Up Probability. Only present in DecisionModels
    up?: number,

    // Down Probability. Only present in DecisionModels
    dp?: number
}






/**
 * Prediction
 * The final prediction dict generated by the model. It contains the result, the time
 * in which the prediction was made and the metadata.
 */
export interface IPrediction {
    // Prediction result: -1 | 0 | 1
    r: IPredictionResult,

    // The time in which the prediction was performed (milliseconds)
    t: number,

    /**
     * Prediction metadata: A ArimaModel will always output a single IPredictionMetaData
     * whereas, MultiModels will output any number of IPredictionMetaData dictionaries
     */
    md: IPredictionMetaData[]
}









/* Model */



/**
 * Model Type Name
 * The type of a model can be determined based on its configuration. Existing models are:
 * 1) ArimaModel: A model with a single ArimaModel
 * 2) DecisionModel: A model with at least 5 ArimaModels and at least 1 DecisionModel and a 
 * minimum probability.
 * 3) MultiDecisionModel: A model with at least 5 ArimaModels and at least 2 DecisionModels
 * and a minimum probability.
 */
 export type IModelTypeName = 'ArimaModel'|'DecisionModel'|'MultiDecisionModel';




/**
 * Arima Config
 * The configuration to be used on the Arima Instance to generate predictions.
 */
export interface IArimaConfig {
    /**
     * p is the order (number of time lags) of the autoregressive model
     * d is the degree of differencing (the number of times the data have had past values subtracted)
     * q is the order of the moving-average model.
     */
    p: number,
    d: number,
    q: number,

    /**
     * P, D, Q refer to the autoregressive, differencing, and moving average terms for the 
     * seasonal part of the ARIMA model.
     */
     P: number,
     D: number,
     Q: number,

     // m refers to the number of periods in each season
     m: number
}





/**
 * ArimaModel Configuration
 * The configuration that will be use to generate and interpret predictions.
 */
export interface IArimaModel {
    // The number of prediction candlesticks that will look into the past in order to make a prediction.
    lookback: number,

    // The number of predictions to be generated by Arima
    predictions: number,

    // Parameters for ARIMA(p,d,q)(P,D,Q)m
    arima: IArimaConfig,

    // The interpreter that will determine the prediction's result
    interpreter: IInterpreterConfig
}





/**
 * Model
 * A Model can be any of the following:
 * ArimaModel(1): Determines results based on the prediction of a single model.
 * MultiModel(n): Determines results based on the predictions of multiple single models.
 * StrategyModel(0): Determines results based on the other models.
 */
export interface IModel {
    // Identity of the Model. If it is an Arima Model, it must follow the guidelines.
    id: string,

    /**
     * The number of decision models that must agree in order to output a non-neutral prediction result.
     * This property only exists in MultiDeceisionModel
     */
    consensus?: number,

    /**
     * The minimum probability required to output a non-neutral prediction result. Only present in 
     * DecisionModels & MultiDecisionModels.
     */
    minimum_probability?: number,

    // List of ArimaModels
    arima_models: IArimaModel[]

    // List of DecisionModels @TODO
    decision_models: any[]
}




