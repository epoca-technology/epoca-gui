

/* Epoch Types at types/epoch.py */






/* Epoch Configuration */




/**
 * Epoch Config
 * The configuration to be used by the Epoch and influence the entire infrastructure.
 */
export interface IEpochConfig {
    // Random seed to be set on all required libraries in order to guarantee reproducibility
    seed: number,

    // Identifier, must be preffixed with "_". For example: "_EPOCHNAME"
    id: string,

    /**
     * Train Split
     * This percent value is used to separate the data that is used to train and test the 
     * models. It is important to always evaluate models on data they have not yet seen.
     * This value is also used to calculate the training_evaluation range.
     */
     train_split: number,

    /**
    * The range of the Epoch. These values are used for:
    * 1) Calculate the training evaluation range (1 - train_split)
    * 2) Calculate the backtest range (epoch_width * backtest_split)
    */
    start: number,
    end: number,

    /**
     * The training evaluation range is used for the following:
     * 1) Evaluate freshly trained Regression Models
     * 2) Evaluate freshly trained Classification Models
     * training_evaluation_range = 1 - train_split
     */
    training_evaluation_start: number,
    training_evaluation_end: number,

    /**
     * The backtest range is used for the following:
     * 1) Discover Regressions & Classifications
     * 2) Backtest shortlisted ClassificationModels
     * 3) Backtest generated ConsensusModels
     * backtest_range = epoch_width * backtest_split
     */
    backtest_start: number,
    backtest_end: number,

    // Highest and lowest price within the Epoch.
    // If the price was to go above the highest or below the lowest price, trading should be
    // stopped and a new epoch should be published once the market is "stable"
    highest_price: number,
    lowest_price: number,

    /**
     * Regression Parameters
     * The values that represent the input and the ouput of a regression.
     * The lookback stands for the number of candlesticks from the past it needs to look at
     * in order to generate a prediction.
     * The predictions stand for the number of predictions the regressions will generate.
     */
    regression_lookback: number,
    regression_predictions: number,

    /**
     * Model Discovery Steps
     * Similar to the Classification Training Data, when discovering Classifications or Regressions,
     * the process iterates over the prediction candlesticks based on the model_discovery_steps and
     * evaluates every prediction generated by the model, generating the discovery and the discovery
     * payload.
     */
    model_discovery_steps: number,

    // The number of minutes the model will remain idle when a position is closed during backtests
    idle_minutes_on_position_close: number,

    // The identifier of the classification training data for unit tests
    classification_training_data_id_ut: string
}