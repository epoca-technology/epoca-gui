




/* Discovery Types at types/discovery_types.py */





/**
 * Discovery
 * The discovery dict contains the neccessary information for a model to
 * to function and it is attached to it when saving.
 */
export interface IDiscovery {
    // Details of the increase predictions
    increase_min: number,
    increase_max: number,

    // Details of the decrease predictions
    decrease_min: number,
    decrease_max: number,

    // Details of the successful predictions
    increase_successful_mean: number,
    decrease_successful_mean: number,

    // The mean of the successful increase and decrease means
    successful_mean: number
}






/**
 * Discovery Payload
 * The payload contains all the information that was collected during the
 * discovery. For performance reasons, the payload is only saved in the
 * training certificate and not the model itself.
 */
export interface IDiscoveryPayload {
    // If the discovery process is to be stopped for any reason, this property
    // will be string. If everything went well it will be None
    early_stopping?: string,

    // Predictions generated by the model as well as the actual outcomes. 
    // Notice that when a model predicts a value that is below the minimum, 
    // the prediction is considered to be neutral.
    neutral_num: number,
    increase_num: number,
    decrease_num: number,
    increase_outcome_num: number,
    decrease_outcome_num: number,

    // The accuracy of the generated predictions
    increase_accuracy: number,
    decrease_accuracy: number,
    accuracy: number,

    // Details of the increase predictions
    increase_list: number[],
    increase_min: number,
    increase_max: number,
    increase_mean: number,

    // Details of the decrease predictions
    decrease_list: number[],
    decrease_min: number,
    decrease_max: number,
    decrease_mean: number,

    // Details of the successful increase predictions
    increase_successful_list: number[],
    increase_successful_mean: number,

    // Details of the successful decrease predictions
    decrease_successful_list: number[],
    decrease_successful_mean: number,

    // The mean of the successful increase and decrease means
    successful_mean: number
}
