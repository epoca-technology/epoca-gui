import { IModel } from "./model";



/* Classification Training Data Types at types/classification_training_data_types.py */








/**
 * Active Training Data Position
 * When a position is opened, the active position dict is populated with the up and down price values
 * as well as the predictions generated by the Models. Once the position closes, the row dict
 * is completed with the up and down values
 */
export interface ITrainingDataActivePosition {
    // The price in which the position will be closed as up
    up_price: number,

    // The price in which the position will be closed as down
    down_price: number,

    // Model's features which will be completed with labels once the position closes
    row: {[modelID: string]: number}
}








/**
 * Training Data Config
 * The Training configuration that resides in the configuration file and it is used to initialize
 * the training data generator.
 */
export interface ITrainingDataConfig {
    // The ID of the Regression Selection that was used to pick the Regression Models
    regression_selection_id: string,

    // The description of the Training Data that will be generated.
    description: string,

    /**
     * The Prediction Candlestick steps that will be used to generate the data. If 0 is provided
     * the training data will be generated the traditional way.
     * The purpose of this mode is to increase the size of the Training Dataset and cover more 
     * cases.
     */
    steps: number,

    // Price change percentage that will determine if the price moved up or down after a position is opened
    price_change_requirement: number,

    // The list of Regression Models that will be used to generate features
    regressions: IModel[],

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_aroon: boolean,     // Trend
}





/**
 * Compressed Training Data
 * In order to optimize the size of the training data file, the data is converted into a dict
 * with the rows and columns lists.
 */
export interface ICompressedTrainingData {
    columns: string[],
    rows: Array<number[]>
}





/**
 * Dataset Summary
 * A summary extracted from the DataFrame holding all the features and labels.
 */
export interface ITrainingDataDatasetSummary {
    [featureOrLabel: string]: ITrainingDataDatasetFeatureSummary
}
 export interface ITrainingDataDatasetFeatureSummary {
	"count": number,
	"mean": number,
	"std": number,
	"min": number,
	"25%": number,
	"50%": number,
	"75%": number,
	"max": number
}




/**
 * Training Data File
 * The dict that contains all the information needed to train a ClassificationModel.
 */
export interface ITrainingDataFile {
    // Universally Unique Identifier (uuid4)
    id: string,

    // The ID of the Regression Selection that was used to pick the Regression Models
    regression_selection_id: string,

    // The description of the Training Data that will be generated.
    description: string,

    // The timestamps in which the Training Data process started and ended
    creation_start: number,
    creation_end: number,

    // Start and end time
    start: number,  // First candlestick's ot
    end: number,    // Last candlestick's ct

    /**
     * The Prediction Candlestick steps that will be used to generate the data. If 0 is provided
     * the training data will be generated the traditional way.
     * The purpose of this mode is to increase the size of the Training Dataset and cover more 
     * cases.
     */
    steps: number,

    // Percentage that will determine if the price moved up or down after a position is opened
    price_change_requirement: number,

    // List of RegressionModels
    regressions: IModel[],

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_aroon: boolean,     // Trend

    // The total number of features that will be used by the model to predict
    features_num: number,

    // The real price outcomes when generating the training data
    increase_outcome_num: number,
    decrease_outcome_num: number,

    // Summary of the dataset extracted directly from the DataFrame
    dataset_summary: ITrainingDataDatasetSummary,

    /**
     * Training Data
     * The training data generated in a compressed format.
     */
    training_data: ICompressedTrainingData
}






/**
 * Training Data Summary
 * The summary of the training data that should be placed in training certificates.
 */
export interface ITrainingDataSummary {
    // The ID of the Regression Selection that was used to pick the Regression Models
    regression_selection_id: string,

    // Identifier
    id: string,
    description: string,

    // Date Range
    start: number,    // Open Time of the first prediction candlestick
    end: number,      // Close Time of the last prediction candlestick

    // Dataset Sizes
    train_size: number,     // Number of rows in the train dataset
    test_size: number,      // Number of rows in the test dataset

    // The Prediction Candlestick steps that will be used to generate the data. If 0 is provided
    // the training data will be generated the traditional way.
    // The purpose of this mode is to increase the size of the Training Dataset and cover more 
    // cases.
    steps: number,

    // Percentage that will determine if the price moved up or down after a position is opened
    price_change_requirement: number,

    // Optional Technical Analysis Features
    include_rsi: boolean,       // Momentum
    include_aroon: boolean,     // Trend

    // The total number of features that will be used by the model to predict
    features_num: number
}