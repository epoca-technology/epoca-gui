

/* Keras Utils Types at _types/keras_utils_types.py */






/* Model Templates */


export type IKerasModelTemplateName = 
"KR_CNN_S2"|"KR_CNN_S3"|"KR_CNN_S4"|"KR_CNN_S5"|
"KR_CNN_MP_S2"|"KR_CNN_MP_S3"|"KR_CNN_MP_S4"|"KR_CNN_MP_S5"|
"KR_DNN_S2"|"KR_DNN_S3"|"KR_DNN_S4"|"KR_DNN_S5"|
"KR_CDNN_S2"|"KR_CDNN_S3"|"KR_CDNN_S4"|"KR_CDNN_S5"|
"KR_CDNN_MP_S2"|"KR_CDNN_MP_S3"|"KR_CDNN_MP_S4"|"KR_CDNN_MP_S5"|
"KR_LSTM_S2"|"KR_LSTM_S3"|"KR_LSTM_S4"|"KR_LSTM_S5"|
"KR_BDLSTM_S2"|"KR_BDLSTM_S3"|"KR_BDLSTMS4"|"KR_BDLSTM_S5"|
"KR_CLSTM_S2"|"KR_CLSTM_S3"|"KR_CLSTM_S4"|"KR_CLSTM_S5"|
"KR_CLSTM_MP_S2"|"KR_CLSTM_MP_S3"|"KR_CLSTM_MP_S4"|"KR_CLSTM_MP_S5"|
"KR_GRU_S2"|"KR_GRU_S3"|"KR_GRU_S4"|"KR_GRU_S5";








/* Model Configuration */


// Units used for Dense and LSTM layers
export type IKerasUnit = 2|4|8|16|32|64|128|256|512|1024;


// Filters used in CNN layers
export type IKerasFilter = 2|4|8|16|32|64|128|256|512|1024;


// Kernel Size used in CNN layers
export type IKerasKernelSize = 3|5;


// Pool Size used in CNN_MP layers
export type IKerasPoolSize = 2|4;


// Optimizer Functions
export type IKerasOptimizer = "adam"|"rmsprop";


// Loss Functions
export type IKerasLoss = "mean_absolute_error"|"mean_squared_error";


// Metric Functions
export type IKerasMetric = "mean_absolute_error"|"mean_squared_error";


// Activation Functions
export type IKerasActivation = "relu"|"tanh";




/**
 * Keras Model Configuration
 * The configuration that was used to build the Keras Model.
 */
export interface IKerasModelConfig {
    // The name of the Keras Model. If it doesn't exist it will raise an error.
    name: string,

    // Units
    units?: IKerasUnit[],

    // Activations
    activations?: IKerasActivation[],

    // Filters
    filters?: IKerasFilter[],

    // Kernel Sizes
    kernel_sizes?: IKerasKernelSize[],

    // Pool Sizes
    pool_sizes?: IKerasPoolSize[],

    // Input: The number of past candlesticks the model looks at in order to generate a prediction
    lookback?: number,

    // Output: The number of predictions that will be generated by the model
    predictions?: number
}







/* Training Configuration */



/**
 * Keras Training Configuration
 * The configuration dict that will be used to assist the Regression Training process.
 * For more information regarding these args, view the LearningRateSchedule.ipynb notebook.
 */
export interface IKerasTrainingConfig {
    // A scalar float32 or float64 Tensor or a Python number. The initial learning rate.
    initial_lr: number

    // How often to apply decay.
    decay_steps: number

    // A Python number. The decay rate for the learning rate per step.
    decay_rate: number

    // The maximum number of epochs the training process will go through
    max_epochs: number

    // Number of epochs with no improvement after which training will be stopped.
    patience: number,

    /**
     * Number of samples per gradient update. If unspecified, batch_size will default to 32.
     * Do not specify the batch_size if your data is in the form of datasets
     */
    batch_size: number
}









/* Training History */



/**
 * Training History
 * The dictionary built once the training is completed. The properties adapt accordingly 
 * based on the loss and metric functions used.
 */
export interface IKerasModelTrainingHistory {
    // Training and validation loss
    loss: number[],
    val_loss: number[],

    // Regression Values
    mean_absolute_error?: number[],
    val_mean_absolute_error?: number[],
    mean_squared_error?: number[],
    val_mean_squared_error?: number[]
}







/* Model Summary */



// Optimizer Name
export type IKerasOptimizerName = "Adam"|"RMSprop";


/**
 * Model Optimizer Config
 * The optimizer configuration used when the model was compiled. Keep in mind that
 * all these values are stringified to ensure compatibility with the JSON file format.
 */
export interface IKerasModelOptimizerConfig {
    name: IKerasOptimizerName,
    learning_rate: string,
    decay?: string,
    beta_1?: string,
    beta_2?: string,
    epsilon?: string,
    amsgrad?: string,
    rho?: string,
    momentum?: string,
    centered?: string,
}






/**
 * Model Loss Config
 * The loss configuration used when the model was compiled. Keep in mind that
 * all these values are stringified to ensure compatibility with the JSON file format.
 */
export interface IKerasModelLossConfig {
    name: IKerasLoss,
    reduction?: string,
    from_logits?: string,
    label_smoothing?: string,
    axis?: string,
}





/**
 * Model Layer
 * A layer stacked with other layers within the model.
 */
export interface IKerasModelLayer {
    name: string,
    params: number,
    input_shape: Array<number|null>,
    output_shape: Array<number|null>,
    trainable: boolean,
}



// Model Class Name
export type IKerasModelClassName = "Sequential";


// Metric Names
export type IKerasMetricName = "loss";



/**
 * Model Summary
 * Extracts all the relevant information from a trained model.
 */
export interface IKerasModelSummary {
    // The name of the class used to create the model.
    model_class: IKerasModelClassName,

    // Optimizer Config
    optimizer_config: IKerasModelOptimizerConfig,

    // Loss Config
    loss_config: IKerasModelLossConfig,

    // Metrics
    metrics: IKerasMetricName[],

    // Input and output shapes
    input_shape: Array<number|null>,
    output_shape: Array<number|null>,

    // Layers
    layers: IKerasModelLayer[],

    // Params
    total_params: number
    trainable_params: number
    non_trainable_params: number
}