




/* Prediction Types at types/prediction_types.py */







/* Predictions */




/**
 * When the model evaluates and predicts on current market data, outputs a result of 
 * 1 (long) or 0 (neutral) or -1 (short)
 */
 export type IPredictionResult = 1|0|-1;
 export type IPredictionResultName = 'Long'|'Short'|'Neutral';
 
 
 
 
 
 
 /**
  * Prediction Meta Data
  * This is the data that was used by the interpreter to come up with a result.
  * The only parameter that is required is the description (d) which should always
  * follow the pattern 'long-*' or 'short-*'. The other properties will only be 
  * present if cache is disabled.
  */
 export interface IPredictionMetaData {
     // Interpretation Description
     d: string,  
 
     // List of predictions generated by a Regression as well as the price when it was generated.
     pl?: number[],

     // Regression Features, Technical Analysis and any other data that could be included in the future.
     f?: number[]
 
     // Up Probability. Only present in ClassificationModel Predictions.
     up?: number,
 
     // Down Probability. Only present in ClassificationModel Predictions.
     dp?: number
 }
 
 
 
 
 
 
 /**
  * Prediction
  * The final prediction dict generated by the model. It contains the result, the time
  * in which the prediction was made and the metadata.
  * For KerasRegressionModel, KerasClassificationModel, XGBRegressionModel and XGBClassification, the md list 
  * will always contain one element. 
  * On the other side, the ConsensusModel contains as many metadata elements as Classifications within. They 
  * also have identical indexing.
  */
 export interface IPrediction {
     // Prediction result: -1 | 0 | 1
     r: IPredictionResult,
 
     // The time in which the prediction was performed (milliseconds)
     t: number,
 
     /**
      * Prediction metadata: An ArimaModel|RegressionModel|ClassificationModel will always output 
      * a single IPredictionMetaData whereas, MultiClassificationModels will output any number of 
      * IPredictionMetaData dictionaries according to the number of ClassificationModels within it.
      */
     md: IPredictionMetaData[]
 }